Object subclass: #Adicional	instanceVariableNames: 'valor'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Adicional commentStamp: 'FedericodelMazo 9/17/2017 15:45' prior: 0!Clase abstracta en representación de adicionales especiales para las comprasPuede ser cosas como cupones, envios, garantias, a aplicarle a los precios de las compras.                     valor: numero entero!!Adicional methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/19/2017 21:07'!calcularPrecio: unPrecio	"Aplica el adicional a un precio bruto"	self subclassResponsibility.! !!Adicional methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/19/2017 21:07'!getValor	"Getter del atributo valor"	^ valor.! !!Adicional methodsFor: 'initialization' stamp: 'FedericodelMazo 9/19/2017 21:08'!setValor: unNumero	"Setter del atributo valor"	self subclassResponsibility.! !!Adicional methodsFor: 'initialization' stamp: 'FedericodelMazo 9/19/2017 21:07'!initialize	"Construye una instancia con valor 0"	valor := 0.! !Error subclass: #AdicionalEnvioNegativoError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!AdicionalEnvioNegativoError commentStamp: 'FedericodelMazo 9/16/2017 18:17' prior: 0!Excepción lanzada cuando se intenta crear un envio con valor negativo!Error subclass: #AdicionalPorcentajeInvalidoError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!AdicionalPorcentajeInvalidoError commentStamp: 'FedericodelMazo 9/16/2017 18:17' prior: 0!Excepción lanzada cuando se intenta asignar un valor que no es un porcentaje a un cupon o a una garantia!Object subclass: #AlgoBay	instanceVariableNames: 'productos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!AlgoBay commentStamp: 'FedericodelMazo 9/16/2017 18:50' prior: 0!Representacion de un mercado de compras de productos. 	productos:		Diccionario de claves nombre de producto y valores producto!!AlgoBay methodsFor: 'Agregar' stamp: 'FedericodelMazo 9/16/2017 18:51'!agregarProducto: unNombre conPrecio: unPrecio	"Agrega un producto al mercado"	|prod|	prod:= (Producto new) conNombre: unNombre conPrecio: unPrecio.	productos at: unNombre put:prod .	^ prod! !!AlgoBay methodsFor: 'Agregar' stamp: 'FedericodelMazo 9/16/2017 18:50'!agregar: unProd enCompra: unaCompra	"Agrega un producto a una compra"	unaCompra agregarProducto: unProd! !!AlgoBay methodsFor: 'Agregar' stamp: 'FedericodelMazo 9/17/2017 15:43'!agregarCupon: unCupon enCompra: unaCompra	"Agrega un cupon a una compra. 	Solo el mayor cupon es el valido. Si la compra ya tiene un cupon, confirma cual es el mejor de los dos y deja ese"	|cupon_act mejor_cupon|	cupon_act := unaCompra retirarCupon.	mejor_cupon:= unaCompra elegirMejorCupon: cupon_act y: unCupon.	unaCompra agregarAdicional: mejor_cupon	! !!AlgoBay methodsFor: 'Crear' stamp: 'FedericodelMazo 9/17/2017 15:43'!crearNuevaCompraConGarantia	"Crea una compra con garantia"	|atr|	atr:= (Garantia new) setValor: 10.	^ (Compra new) agregarAdicional: atr.! !!AlgoBay methodsFor: 'Crear' stamp: 'FedericodelMazo 9/17/2017 15:43'!crearNuevaCompraConEnvioYGarantia	"Crea una compra con envio y garantia"	|gar envio compra|	gar := (Garantia new) setValor: 10.	envio := (Envio new) setValor: 100.	compra:= (Compra new) agregarAdicional: gar.	^ compra agregarAdicional: envio.! !!AlgoBay methodsFor: 'Crear' stamp: 'FedericodelMazo 9/17/2017 15:43'!crearNuevaCompraConEnvio	"Crea una compra con envio"	|atr|	atr:= (Envio new) setValor: 100.	^ (Compra new) agregarAdicional: atr.! !!AlgoBay methodsFor: 'Crear' stamp: 'FedericodelMazo 9/16/2017 18:52'!crearNuevaCompra	"Crea una nueva compra normal"	^ Compra new! !!AlgoBay methodsFor: 'Crear' stamp: 'FedericodelMazo 9/16/2017 18:52'!crearCuponConPorcentaje: unValor	"Crea un cupon con descuento"	^ (Cupon new) setValor: unValor.! !!AlgoBay methodsFor: 'Calculos' stamp: 'FedericodelMazo 9/16/2017 18:55'!getProducto: unNombre	"Recibe el nombre de un producto y devuelve el producto. Si no existe, lanza una excepcion"	^ productos at: unNombre ifAbsent: [ AlgoBayProductoNoPresente signal ] .! !!AlgoBay methodsFor: 'Calculos' stamp: 'FedericodelMazo 9/16/2017 18:52'!cantidadDeProductos	"Devuelve la cantidad de productos en el mercado"	^ productos size.! !!AlgoBay methodsFor: 'Calculos' stamp: 'FedericodelMazo 9/16/2017 18:53'!getPrecioTotalDe: unaCompra	"Calcula el precio total de una compra"	^ unaCompra calcularPrecioTotal! !!AlgoBay methodsFor: 'initialization' stamp: 'FedericodelMazo 9/16/2017 18:54'!initialize	"Construye una clase con un diccionario nuevo de productos"	productos:= Dictionary new.! !Error subclass: #AlgoBayProductoNoPresente	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!AlgoBayProductoNoPresente commentStamp: 'FedericodelMazo 9/16/2017 18:56' prior: 0!Excepción lanzada cuando un producto no esta en el mercado!Object subclass: #Compra	instanceVariableNames: 'productos adicionales'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Compra commentStamp: 'FedericodelMazo 9/16/2017 18:49' prior: 0!Representacion de una compra de productos, con atributos especiales como  cobro de envios, garantias y cupones de descuento	productos:		Diccionario de claves nombre de producto y valores producto	atributos:                Lista enlazada de atributos!!Compra methodsFor: 'CalculosDePrecios' stamp: 'FedericodelMazo 9/17/2017 15:43'!calcularPrecioTotal	"Al precio bruto le aplica los atributos de la clase"	|precio|	precio:= self calcularPrecioBruto.	adicionales do: [:atributo | precio:= atributo calcularPrecio: precio].	^ precio.! !!Compra methodsFor: 'CalculosDePrecios' stamp: 'FedericodelMazo 9/19/2017 20:45'!calcularPrecioBruto	"Calcula el precio en bruto, es decir, pre atributos, de la compra"	|sumatoria|	sumatoria := 0.	productos valuesDo: [:prod | sumatoria:=sumatoria + (prod getPrecio)].	^ sumatoria.	! !!Compra methodsFor: 'Agregar' stamp: 'FedericodelMazo 9/16/2017 17:58'!agregarProducto: unProd	"Agrega un producto al diccionario de productos"	productos at: unProd getName put: unProd! !!Compra methodsFor: 'Agregar' stamp: 'FedericodelMazo 9/17/2017 15:47'!agregarAdicional: unAdicional	"Agrega un adicional a la lista enlazada"	adicionales addLast: unAdicional	! !!Compra methodsFor: 'initialization' stamp: 'FedericodelMazo 9/17/2017 15:43'!initialize	"Construye una instancia nueva, con un diccionario nuevo en productos y una lista enlazada de atributos"	productos := Dictionary new.	adicionales := LinkedList new.! !!Compra methodsFor: 'MetodosRespectoACupon' stamp: 'FedericodelMazo 9/17/2017 15:43'!retirarCupon	"Remueve al cupon de la lista enlazada de atributos"	|cupon|	cupon := nil.	adicionales do: [:atr | (atr isKindOf: Cupon) ifTrue: [cupon:= atr]].	(cupon isNotNil) ifTrue: [adicionales remove: cupon].	^ cupon.! !!Compra methodsFor: 'MetodosRespectoACupon' stamp: 'FedericodelMazo 9/16/2017 19:46'!elegirMejorCupon: unCupon y: otroCupon	"Comparador de cupones	Recibe un cupon y un nil, o dos cupones	Devuelve el cupon con mayor valor"	(unCupon isNil) ifTrue: [^ otroCupon].	(otroCupon isNil ) ifTrue: [^ unCupon].	(unCupon getValor > otroCupon getValor) ifTrue:[^unCupon].	(unCupon getValor < otroCupon getValor) ifTrue:[^otroCupon].! !Adicional subclass: #Cupon	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Cupon commentStamp: 'FedericodelMazo 9/17/2017 15:45' prior: 0!Subclase de adicional, en representacion de un cupon de descuento	valor: un entero que representa el porcentaje a ser descontado!!Cupon methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/19/2017 21:08'!setValor: unValor	"Asigna un porcentaje (0 a 100) de descuento"	(unValor < 0 or: unValor >100) ifTrue: [ AdicionalPorcentajeInvalidoError signal ].	valor := unValor.! !!Cupon methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/16/2017 18:00'!calcularPrecio: unPrecio	"Recibe un precio en bruto	Devuelve el precio menos el descuento del cupon"	^ unPrecio - (unPrecio*(valor/100)). ! !Adicional subclass: #Envio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Envio commentStamp: 'FedericodelMazo 9/17/2017 15:45' prior: 0!Subclase de adicional, en representacion del cobro de un envio	valor: un entero que representa el precio del envio!!Envio methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/17/2017 15:42'!setValor: unValor	"Asigna un costo positivo al envio"	(unValor < 0) ifTrue: [ AdicionalEnvioNegativoError  signal ].	valor:=unValor.	! !!Envio methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/16/2017 18:29'!calcularPrecio: unPrecio	"Recibe un precio en bruto	Si el precio es menor a 5000, se le suma el envio	Si no, se devuelve el precio original"	|precio_act|	precio_act:=unPrecio.	(precio_act<5000) ifTrue: [precio_act:=precio_act+valor].	^ precio_act	! !Adicional subclass: #Garantia	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Garantia commentStamp: 'FedericodelMazo 9/17/2017 15:45' prior: 0!Subclase de adicional, en representacion del cobro de una garantia	valor: un entero que representa el porcentaje a ser sumado al precio!!Garantia methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/17/2017 15:42'!setValor: unValor	"Asigna un porcentaje (0 a 100) a la garantía"	(unValor < 0 or: unValor > 100) ifTrue: [ AdicionalPorcentajeInvalidoError signal ].	valor:=unValor.! !!Garantia methodsFor: 'MetodosBasicos' stamp: 'FedericodelMazo 9/16/2017 18:00'!calcularPrecio: unPrecio	"Recibe un precio en bruto	Devuelve el precio con el cobro de la garantia aplicado"	^unPrecio * (valor/100) + unPrecio! !Object subclass: #Producto	instanceVariableNames: 'nombre precio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!Producto commentStamp: 'FedericodelMazo 9/16/2017 17:54' prior: 0!Representacion de un producto, de mercado con un nombre y un precioColabora con Compra y AlgoBay, siendo este productos de ellos.	nombre:		string	precio:		integer!!Producto methodsFor: 'initialization' stamp: 'FedericodelMazo 9/16/2017 17:16'!initialize	"Inicializa una instancia de producto, con nombre en nil y precio en 0"	nombre:= nil.	precio:= 0.! !!Producto methodsFor: 'initialization' stamp: 'FedericodelMazo 9/16/2017 17:15'!getName	"Getter del nombre del producto"	^ nombre! !!Producto methodsFor: 'initialization' stamp: 'FedericodelMazo 9/19/2017 19:40'!conNombre: unNombre conPrecio: unPrecio	"Metodo para ser usado junto al constructor new	Recibe un nombre y un precio positivo	Asigna estos a la instancia"		nombre:= unNombre.	(unPrecio<0) ifTrue:[ProductoPrecioNegativoError signal].	precio:= unPrecio.! !!Producto methodsFor: 'initialization' stamp: 'FedericodelMazo 9/16/2017 17:15'!getPrecio	"Getter del precio del producto"	^ precio! !Error subclass: #ProductoPrecioNegativoError	instanceVariableNames: 'nombre precio'	classVariableNames: ''	poolDictionaries: ''	category: 'TP1'!!ProductoPrecioNegativoError commentStamp: 'FedericodelMazo 9/16/2017 17:55' prior: 0!Excepción lanzada cuando se intenta crear un producto con precio negativo!