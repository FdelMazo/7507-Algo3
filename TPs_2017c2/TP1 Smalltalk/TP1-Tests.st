TestCase subclass: #AdicionalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!AdicionalTest commentStamp: 'FedericodelMazo 9/16/2017 18:17' prior: 0!Test de la clase y subclases Atributo!!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:20'!testPrecioConEnvioAdicionaValor	"Verifica que se aplica correctamente el envio al precio"	|preciobruto envio precioconenvio|	preciobruto:= 100.	envio := (Envio new) setValor: 100.	precioconenvio := envio calcularPrecio:  preciobruto.	self assert: precioconenvio == 200.! !!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:21'!testCrearEnvioConValorNegativoLanzaError	"Verifica no se puede crear un envio con un valor negativo"	self should:[(Envio new) setValor: -10] raise: AdicionalEnvioNegativoError. ! !!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:22'!testCrearGarantiaConPorcentajeInvalidoLanzaError	"Verifica no se puede crear una garantia con un porcentaje mayor a 100 o menor a 0"	self should:[(Garantia new) setValor: -10] raise: AdicionalPorcentajeInvalidoError. ! !!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:20'!testPrecioConGarantiaAdicionaValor	"Verifica que se aplica la garantia al precio correctamente"	|preciobruto gar preciocongar|	preciobruto:= 100.	gar := (Garantia new) setValor: 10.	preciocongar := gar calcularPrecio:  preciobruto.	self assert: preciocongar == 110.! !!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 18:29'!testEnvioNoAplicaEnComprasGrandes	"Verifica que NO se aplica el envio al precio cuando este supera los 5000"	|preciobruto envio precioconenvio|	preciobruto:= 5100.	envio := (Envio new) setValor: 100.	precioconenvio := envio calcularPrecio:  preciobruto.	self assert: precioconenvio == 5100.! !!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:21'!testCrearCuponConPorcentajeInvalidoLanzaError	"Verifica no se puede crear un cupon con un porcentaje mayor a 100 o menor a 0"	self should:[(Cupon new) setValor: 110] raise: AdicionalPorcentajeInvalidoError. 	self should:[(Cupon new) setValor: -10] raise: AdicionalPorcentajeInvalidoError. ! !!AdicionalTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:21'!testPrecioConCuponDescuentaValor	"Verifica que se descuenta correctamente el cupon al precio"	|preciobruto cupon preciocondescuento|	preciobruto:= 100.	cupon:= (Cupon new) setValor: 10.	preciocondescuento := cupon calcularPrecio:  preciobruto.	self assert: preciocondescuento == 90.! !TestCase subclass: #AlgoBayTestAlumno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!AlgoBayTestAlumno commentStamp: 'FedericodelMazo 9/16/2017 18:57' prior: 0!Test de la clase Algobay, hechas por el alumno!!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:18'!testEnvioEnCompra	"Verifica el calculo de precio total con evio en una compra"	|compra prod1 prod2 bay|	bay := AlgoBay new.	prod1 := bay agregarProducto: 'foo' conPrecio: 100.	prod2 := bay agregarProducto: 'bar' conPrecio: 200.		compra := bay crearNuevaCompraConEnvio.	bay agregar: prod1 enCompra: compra.	bay agregar: prod2 enCompra: compra.		self assert: (bay getPrecioTotalDe: compra) == 400.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:17'!testPrecioTotalCompra	"Verifica el calculo de precio total de una compra"	|compra prod1 prod2 bay|	bay := AlgoBay new.	prod1 := bay agregarProducto: 'foo' conPrecio: 100.	prod2 := bay agregarProducto: 'bar' conPrecio: 200.		compra := bay crearNuevaCompra .	bay agregar: prod1 enCompra: compra.	bay agregar: prod2 enCompra: compra.		self assert: (bay getPrecioTotalDe: compra) == 300.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:19'!testEnvioYGarantiaEnCompra	"Verifica el calculo de precio total con garantia y envio en una compra"		|compra prod1 prod2 bay|	bay := AlgoBay new.	prod1 := bay agregarProducto: 'foo' conPrecio: 100.	prod2 := bay agregarProducto: 'bar' conPrecio: 200.			compra := bay crearNuevaCompraConEnvioYGarantia.	bay agregar: prod1 enCompra: compra.	bay agregar: prod2 enCompra: compra.		self assert: (bay getPrecioTotalDe: compra) == 430.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:22'!testVariosCuponesEnCompraDejaAlMayor	"Verifica que el cupon mas grande es el valido"	|compra prod1 prod2 bay cupon1 cupon2 cupon3|	bay := AlgoBay new.	prod1 := bay agregarProducto: 'foo' conPrecio: 100.	prod2 := bay agregarProducto: 'bar' conPrecio: 200.		cupon1:= bay crearCuponConPorcentaje: 10.	cupon2:= bay crearCuponConPorcentaje: 20.	cupon3:= bay crearCuponConPorcentaje: 30.		compra := bay crearNuevaCompra .	bay agregar: prod1 enCompra: compra.	bay agregar: prod2 enCompra: compra.	bay agregarCupon: cupon1 enCompra: compra.	bay agregarCupon: cupon2 enCompra: compra.	bay agregarCupon: cupon3 enCompra: compra.			self assert: (bay getPrecioTotalDe: compra) == 210.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:08'!testCantidadProductosMercado	"Verifica la cantidad de productos del mercado"	|abay prod1 prod2|	abay := AlgoBay new.	prod1 := abay agregarProducto: 'foo' conPrecio: 100.	prod2 := abay agregarProducto: 'bar' conPrecio: 100.		self assert: abay cantidadDeProductos == 2.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:18'!testGarantiaEnCompra	"Verifica el calculo de precio total con garantia en una compra"	|compra prod1 prod2 bay|	bay := AlgoBay new.	prod1 := bay agregarProducto: 'foo' conPrecio: 100.	prod2 := bay agregarProducto: 'bar' conPrecio: 200.			compra := bay crearNuevaCompraConGarantia.	bay agregar: prod1 enCompra: compra.	bay agregar: prod2 enCompra: compra.		self assert: (bay getPrecioTotalDe: compra) == 330.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:08'!testAgregarProductoAMercado	"Verifica agregar productos al bay"	|abay prod|	abay := AlgoBay new.	prod := abay agregarProducto: 'foo' conPrecio: 100.		self assert: (abay getProducto: 'foo') == prod.! !!AlgoBayTestAlumno methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 19:17'!testCuponEnCompra	"Verifica el calculo de precio total con un cupon en una compra"	|compra prod1 prod2 bay cupon|	bay := AlgoBay new.	prod1 := bay agregarProducto: 'foo' conPrecio: 100.	prod2 := bay agregarProducto: 'bar' conPrecio: 200.		cupon:= bay crearCuponConPorcentaje: 20.		compra := bay crearNuevaCompra .	bay agregar: prod1 enCompra: compra.	bay agregar: prod2 enCompra: compra.	bay agregarCupon: cupon enCompra: compra.		self assert: (bay getPrecioTotalDe: compra) == 240.! !TestCase subclass: #CompraTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!CompraTest commentStamp: 'FedericodelMazo 9/16/2017 18:17' prior: 0!Test de la clase Compra!!CompraTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/17/2017 15:43'!testPrecioBrutoDistintoPrecioNeto	"Verifica que en una compra con envio el precio pre cobro de envio es distinto al post envio"	|compra prod envio bruto neto|	compra := Compra new.	envio := (Envio new) setValor: 100.	compra agregarAdicional: envio.	prod := (Producto new) conNombre: 'foo' conPrecio: 100.	compra agregarProducto: prod.	bruto := compra calcularPrecioBruto.	neto := compra calcularPrecioTotal.		self deny: bruto == neto.	self assert: bruto == 100.	self assert: neto == 200.! !!CompraTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/17/2017 15:44'!testCalculoConTresAdicionales	"Verifica que funcione una compra muy cargada (con los 3 atributos)"	|compra prod envio garantia cupon bruto neto|	compra := Compra new.	envio := (Envio new) setValor: 100.	garantia := (Garantia new) setValor: 10.	cupon := (Cupon new) setValor: 20.	compra agregarAdicional: garantia.	compra agregarAdicional: envio.	compra agregarAdicional: cupon.		prod := (Producto new) conNombre: 'foo' conPrecio: 500.	compra agregarProducto: prod.		bruto := compra calcularPrecioBruto.	neto := compra calcularPrecioTotal.		self deny: bruto == neto.	self assert: bruto == 500.	self assert: neto closeTo: ((500 * 1.1) + 100)*0.8.! !!CompraTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 21:23'!testCompararCuponesDevuelveMayor	"Verifica que funcione la comparacion entre cupones"	|cupon1 cupon2 compra|	cupon1 := (Cupon new) setValor: 20.	cupon2 := (Cupon new) setValor: 10.	compra := Compra new.		self assert: (compra elegirMejorCupon: cupon1 y: cupon2) == cupon1.	self assert: (compra elegirMejorCupon: cupon2 y: cupon1) == cupon1.! !TestCase subclass: #ProductoTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!ProductoTest commentStamp: 'FedericodelMazo 9/16/2017 17:54' prior: 0!Test de la clase Producto!!ProductoTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/19/2017 19:40'!testInicializarProductoConPrecioNegativoShouldError	"Verifica que un producto creado con un precio negativo lance el error PrecioNegativoError"	|nombre precio prod|	nombre := 'foo'.	precio := -100.	self should: [prod := (Producto new) conNombre: nombre conPrecio:precio] raise: ProductoPrecioNegativoError.! !!ProductoTest methodsFor: 'tests' stamp: 'FedericodelMazo 9/16/2017 17:11'!testInicializarProductoConNombreyPrecio	"Verifica que un producto se creo correctamente con un nombre y un precio"	|nombre precio prod|	nombre := 'foo'.	precio := 100.	prod := (Producto new) conNombre: nombre conPrecio:precio.	self assert: prod getName == nombre & prod getPrecio == precio.! !